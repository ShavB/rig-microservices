name: CI/CD Pipeline ðŸš€

on:
  push: 
    branches: 
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore ./research-rig.sln

      - name: Test
        run: dotnet test ./research-rig.sln --configuration Release

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        run: dotnet restore ./research-rig.sln

      - name: Build
        run: dotnet build ./research-rig.sln --configuration Release --no-restore

      - name: Publish
        run: dotnet publish ./research-rig.sln --configuration Release --no-build

  push:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker Images
        run: |
          docker build -t authentication-service -f Authentication.Service/Dockerfile.authentication Authentication.Service
          docker build -t transaction-service -f Transaction.service/Dockerfile.transaction Transaction.service
          docker build -t authorization-gateway -f Authorization.Gateway/Dockerfile.gateway Authorization.Gateway

      - name: Tag and Push Docker Images to ECR
        run: |
          docker tag authentication-service:latest ${{ secrets.AWS_ECR_REGISTRY }}/authentication-service:latest
          docker tag transaction-service:latest ${{ secrets.AWS_ECR_REGISTRY }}/transaction-service:latest
          docker tag authorization-gateway:latest ${{ secrets.AWS_ECR_REGISTRY }}/authorization-gateway:latest

          docker push ${{ secrets.AWS_ECR_REGISTRY }}/authentication-service:latest
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/transaction-service:latest
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/authorization-gateway:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster rig-clusters --service rig-servies --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"

      - name: Monitor ECS Deployment and Rollback if Needed
        run: |
          SERVICE_NAME="rig-servies"
          CLUSTER_NAME="rig-clusters"

          # Get the current deployment ID
          DEPLOYMENT_ID=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].deployments[?status==`PRIMARY`].id' --output text)
          
          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "No active deployment found."
            exit 1
          fi

          # Check the deployment status
          STATUS=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].deployments[?id==`'"$DEPLOYMENT_ID"'`].rolloutState' --output text)
          
          if [ "$STATUS" != "COMPLETED" ]; then
            echo "Deployment failed, rolling back"

            # Get the current task definition
            CURRENT_TASK_DEF=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text)
            
            if [ -z "$CURRENT_TASK_DEF" ]; then
              echo "Current task definition not found."
              exit 1
            fi

            # Get the revision of the current task definition
            CURRENT_REVISION=$(aws ecs describe-task-definition --task-definition $CURRENT_TASK_DEF --query 'taskDefinition.revision' --output text)

            if [ -z "$CURRENT_REVISION" ]; then
              echo "Current task definition revision not found."
              exit 1
            fi
            
            # Calculate previous revision
            PREV_REVISION=$((CURRENT_REVISION - 1))
            PREV_TASK_DEF="${CURRENT_TASK_DEF%:*}:$PREV_REVISION"

            # Verify that the previous task definition exists
            if ! aws ecs describe-task-definition --task-definition $PREV_TASK_DEF > /dev/null 2>&1; then
              echo "Previous task definition ${PREV_TASK_DEF} not found."
              # Optional: If previous task definition not found, you might want to notify someone or log this event.
              exit 1
            fi
            
            # Roll back to the previous revision
            aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $PREV_TASK_DEF --force-new-deployment
          else
            echo "Deployment successful"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "eu-west-1"
